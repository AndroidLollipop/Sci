const a = require("../astEval.js")
const t = require("../tokParse.js")
const util = require('util')
const youClod = (x) => console.log(util.inspect(x, { showHidden: false, depth: null }))
const wrapString = t.wrapString
// THESE SHOULD SUCCEED
youClod(t.matchEscapedLiteral(wrapString("are\\ you autistic")))
youClod(t.matchStringLiteral(wrapString("'are\\ you autistic'")))
youClod(t.matchStringLiteral(wrapString('"are\\ you autistic"')))
youClod(t.matchFloatLiteral(wrapString("123")))
youClod(t.matchFloatLiteral(wrapString("123.456")))
youClod(t.matchIdentifier(wrapString("a1")))
youClod(t.matchIf(wrapString("if asdf")))
youClod(t.matchDefine(wrapString("str autism = 'you'")))
youClod(t.matchDefine(wrapString("num star= 1")))
youClod(t.matchDefine(wrapString("num havana =1.2")))
youClod(t.matchParamd(wrapString("( asdf, abcd, efgh)")))
youClod(t.matchParamd(wrapString("( asdf, abcd, efgh,)")))
youClod(t.matchParamd(wrapString("(  asdf,    abcd  , efgh  ) ")))
youClod(t.matchParamd(wrapString("( asdf )")))
youClod(t.matchParamd(wrapString("()")))
youClod(t.matchExprExtern(wrapString("((((((havana))))))")))
youClod(t.matchExprExtern(wrapString("yellow")))
youClod(t.matchExprExtern(wrapString("(havana))"))) // this by itself isn't invalid, but the next call should fail immediately
youClod(t.matchExprExtern(wrapString("( abc * def ) + ( ghi * jkl )")))
youClod(t.matchExprExtern(wrapString("( 123 * 456 ) + ( 789 * 012 )")))
youClod(t.matchExprExtern(wrapString("(123*456)+(789*0.12)")))
youClod(t.matchDefine(wrapString("num havana = camila + young")))
// THESE SHOULD FAIL
youClod(t.matchStringLiteral(wrapString("'are\\ you autistic\"")))
youClod(t.matchFloatLiteral(wrapString("123.a")))
youClod(t.matchIdentifier(wrapString("1a")))
youClod(t.matchParamd(wrapString("(,)")))
youClod(t.matchParamd(wrapString("(1a)")))
youClod(t.matchParamd(wrapString(" (a)")))
youClod(t.matchExprExtern(wrapString("((havana)")))

const ex1 = t.matchDefine(wrapString("num havana = camila + young")).treeNode
const ex2 = t.matchExprExtern(wrapString("(123*456)+(789*0.12)")).treeNode
const se1 = (name) => name == "camila" ? { type: "number", value: 500 } : { type: "number", value: 100 }
console.log(a.evaluateExpression(a.emptyScope())(ex2))
youClod(t.matchExprExtern(wrapString("7+3*6*7*9")))
youClod(t.matchExprExtern(wrapString("7*3+6*7*9")))
youClod(t.matchExprExtern(wrapString("((1+2)*(3+(4*5)))+havana")))
youClod(t.matchExprExtern(wrapString("7+7+8*3+5")))
youClod(t.matchExprExtern(wrapString("7+7+8*3+5*3+3")))
youClod(t.matchFundef(wrapString("num potato(p1, p2, p3){num skye = 1;num scotland = 2; return p1+p2+p3+skye+scotland}")))
youClod(t.matchExprExtern(wrapString("-7*3")))
console.log(a.evaluateExpression(a.emptyScope())(t.matchFundef(wrapString("num potato(p1, p2, p3){num skye = 1;num scotland = 2; return p1+p2+p3+skye+scotland}")).treeNode))
youClod(t.matchExprExtern(wrapString("-7*fun(5, havana+3*0-1)")))
youClod(t.matchExprExtern(wrapString("fun(5,1)*7")))
youClod(t.matchFundef(wrapString("num potato(p1, p2, p3){num skye = 1;num scotland = 2; num add(p1, p2, p3, p4, p5){return p1+p2+p3+p4+p5}; return add(p1,p2,p3,skye,scotland)}")))
youClod(t.matchIfExpression(wrapString("if (5*3 == 2*4) { num potato = 1 }")))
youClod(t.matchFundef(wrapString("num slowFibonacci(n){if(n < 3){return 1};return slowFibonacci(n-1)+slowFibonacci(n-2)}")))
youClod(t.matchProgram(wrapString("num slowFibonacci(n){if(n < 3){return 1};return slowFibonacci(n-1)+slowFibonacci(n-2)}")))
youClod(t.matchProgram(wrapString("(10+9)*(8+7+6)*5+4*3*2-1")))
youClod(t.matchProgram(wrapString("9*8*7*(6+5-4-3)+2*1")))